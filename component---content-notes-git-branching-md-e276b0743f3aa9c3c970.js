"use strict";(self.webpackChunkengarcia=self.webpackChunkengarcia||[]).push([[90],{3624:function(e,t,a){a.d(t,{Z:function(){return w}});var n=a(7294),r=a(8650),l=a.n(r),o=a(1597),s=a(9124),i=a(9820),c=a(5900),m=a.n(c),u=function(e){var t,a=e.title,r=e.theme,l=e.tabs,o=void 0===l?[]:l;return n.createElement("div",{className:m()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=o.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===r,t))},n.createElement("div",{className:"cds--grid"},n.createElement("div",{className:"cds--row"},n.createElement("div",{className:"cds--col-lg-12"},n.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},d=function(e){var t=e.relativePagePath,a=e.repository,r=(0,o.useStaticQuery)("1364590287").site.siteMetadata.repository,l=a||r,s=l.baseUrl,i=l.subDirectory,c=s+"/edit/"+l.branch+i+"/src/pages"+t;return s?n.createElement("div",{className:"cds--row EditLink-module--row--BEmSX"},n.createElement("div",{className:"cds--col"},n.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},p=a(4703),h=a(1721),g=function(e){function t(){return e.apply(this,arguments)||this}return(0,h.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,r=e.slug,s=r.split("/").filter(Boolean).slice(-1)[0],i=a.map((function(e){var t,a=l()(e,{lower:!0,strict:!0}),i=a===s,c=new RegExp(s+"/?(#.*)?$"),u=r.replace(c,a);return n.createElement("li",{key:e,className:m()((t={},t["PageTabs-module--selected-item--aBB0K"]=i,t),"PageTabs-module--list-item--024o6")},n.createElement(o.Link,{className:"PageTabs-module--link--Kz-7R",to:""+u},e))}));return n.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},n.createElement("div",{className:"cds--grid"},n.createElement("div",{className:"cds--row"},n.createElement("div",{className:"cds--col-lg-12 cds--col-no-gutter"},n.createElement("nav",{"aria-label":t},n.createElement("ul",{className:"PageTabs-module--list--xLqxG"},i))))))},t}(n.Component),b=g,k=a(7296),f=a(5387),N=a(3732),v=function(e){var t=e.date,a=new Date(t);return t?n.createElement(N.X2,{className:"last-modified-date-module--row--XJoYQ"},n.createElement(N.sg,null,n.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},w=function(e){var t=e.pageContext,a=e.children,r=e.location,c=e.Title,m=t.frontmatter,h=void 0===m?{}:m,g=t.relativePagePath,N=t.titleType,w=h.tabs,E=h.title,y=h.theme,P=h.description,T=h.keywords,D=h.date,x=(0,f.Z)().interiorTheme,C=(0,o.useStaticQuery)("2456312558").site.pathPrefix,q=C?r.pathname.replace(C,""):r.pathname,L=w?q.split("/").filter(Boolean).slice(-1)[0]||l()(w[0],{lower:!0}):"",Z=y||x;return n.createElement(i.Z,{tabs:w,homepage:!1,theme:Z,pageTitle:E,pageDescription:P,pageKeywords:T,titleType:N},n.createElement(u,{title:c?n.createElement(c,null):E,label:"label",tabs:w,theme:Z}),w&&n.createElement(b,{title:E,slug:q,tabs:w,currentTab:L}),n.createElement(k.Z,{padded:!0},a,n.createElement(d,{relativePagePath:g}),n.createElement(v,{date:D})),n.createElement(p.Z,{pageContext:t,location:r,slug:q,tabs:w,currentTab:L}),n.createElement(s.Z,null))}},5184:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return s},default:function(){return m}});var n=a(3366),r=(a(7294),a(4983)),l=a(3624),o=["components"],s={},i={_frontmatter:s},c=l.Z;function m(e){var t=e.components,a=(0,n.Z)(e,o);return(0,r.kt)(c,Object.assign({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"I follow git branching naming convention outline in this ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/digitaljhelms/4287848"},"gist"))),(0,r.kt)("p",null,"List all branches including remotes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -a\n")),(0,r.kt)("h3",null,"Resetting local branch to match remote"),(0,r.kt)("p",null,"Setting your branch to exactly match the remote branch can be done in two steps:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git fetch origin\ngit reset --hard origin/master\n")),(0,r.kt)("p",null,"If you want to save your current branch’s state before doing this (just in case), you can do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git commit -a -m "Saving my work, just in case"\ngit branch my-saved-work\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tip: Also see git clean")),(0,r.kt)("h3",null,"Deleting a remote branch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push origin :<branch-name>\n")),(0,r.kt)("h2",null,"Local branches"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Sourced From:")," ",(0,r.kt)("a",{parentName:"p",href:"https://railsware.com/blog/2014/08/11/git-housekeeping-tutorial-clean-up-outdated-branches-in-local-and-remote-repositories/"},"Git housekeeping tutorial")),(0,r.kt)("p",null,"At first, list all local branches:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git branch\n")),(0,r.kt)("p",null,"We need to know what branches are already merged in “master” and can be easily removed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout master\ngit branch --merged\n")),(0,r.kt)("p",null,"Now, remove all outdated branches with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -d <branch-name-old-merged-feature>\n")),(0,r.kt)("p",null,"Next, decide what to do with not merged branches:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git branch --no-merged\n")),(0,r.kt)("p",null,"If some of them is just abandoned stuff that you don’t need anymore, remove it with “-D” option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -D old-abandoned-feature\n")),(0,r.kt)("h3",null,"References to remote branches"),(0,r.kt)("p",null,"After each git pull or git fetch command Git creates references to remote branches in local repository, but doesn’t clean up stale references."),(0,r.kt)("p",null,"List referenced remote branches:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -r\n")),(0,r.kt)("p",null,"Clean-up outdated references:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git remote prune origin\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tip: Update repository with: ",(0,r.kt)("inlineCode",{parentName:"p"},"git fetch -p")," and Git automatically prunes all stale references.")),(0,r.kt)("h2",null,"Remote branches"),(0,r.kt)("p",null,"Usually, remote repository is a big garbage heap of stale branches, if there is no responsible housekeeping person."),(0,r.kt)("p",null,"After previous ",(0,r.kt)("inlineCode",{parentName:"p"},"git remote prune origin")," we should have synched list of remote branches."),(0,r.kt)("p",null,"At first, we can find branches which are already merged in “master”:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout master\n$ git branch -r --merged\n")),(0,r.kt)("p",null,"But this command does not provide much information. What if this branch is merged, but still used for feature development. Would be cool to know last commit date and author."),(0,r.kt)("p",null,"This magic snippet provides all required information:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'for branch in `git branch -r --merged | grep -v HEAD`; do echo -e `git show --format="%ci %cr %an" $branch | head -n 1` \\\\t$branch; done | sort -r\n')),(0,r.kt)("p",null,"Now, you can delete own remote branches, and ask other authors to clean-up theirs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ git push origin --delete branch-name\n")),(0,r.kt)("p",null,"Similar snippet for not merged branches:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ for branch in `git branch -r --no-merged | grep -v HEAD`; do echo -e `git show --format="%ci %cr %an" $branch | head -n 1` \\\\t$branch; done | sort -r\n')),(0,r.kt)("p",null,"This list should be reviewed more thoroughly to avoid losing important commits."))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---content-notes-git-branching-md-e276b0743f3aa9c3c970.js.map
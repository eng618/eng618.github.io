"use strict";(self.webpackChunkengarcia=self.webpackChunkengarcia||[]).push([[1980],{7248:function(e,n,t){t.r(n);var l=t(8453),a=t(6540);function o(e){const n=Object.assign({p:"p",h2:"h2",ol:"ol",li:"li",a:"a",code:"code",pre:"pre",h3:"h3",ul:"ul"},(0,l.R)(),e.components),{PageDescription:t,AnchorLinks:o,AnchorLink:s}=n;return s||r("AnchorLink",!0),o||r("AnchorLinks",!0),t||r("PageDescription",!0),a.createElement(a.Fragment,null,"\n",a.createElement(t,null,a.createElement(n.p,null,"Use this guide to contribute to the theme. We’ll show you how to get the\ndevelopment environment set up as quickly as possible so you can start\ncontributing.")),"\n",a.createElement(o,null,a.createElement(s,null,"Project setup"),a.createElement(s,null,"Development"),a.createElement(s,null,"Work in a branch"),a.createElement(s,null,"Sass and CSS Modules"),a.createElement(s,null,"VS Code"),a.createElement(s,null,"Test pages"),a.createElement(s,null,"Publishing")),"\n",a.createElement(n.h2,null,"Project setup"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Go to\n",a.createElement(n.a,{href:"https://github.com/carbon-design-system/gatsby-theme-carbon"},"gatsby-theme-carbon"),"\nand click the ",a.createElement(n.code,null,"Fork")," button in the top-right corner."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"After it’s finished, click on the ",a.createElement(n.code,null,"Clone or Download")," button and copy the\ncontents."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"In your terminal, clone the repo into your directory of choice"),"\n"),"\n"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-sh"},"git clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon\n")),"\n",a.createElement(n.ol,{start:"4"},"\n",a.createElement(n.li,null,"When you clone your forked repo the ",a.createElement(n.code,null,"origin")," is set to your fork by default.\nYou’ll want to add a remote that points to the upstream repo."),"\n"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-sh"},"git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n")),"\n",a.createElement(n.ol,{start:"5"},"\n",a.createElement(n.li,null,"In your terminal, verify that the remotes have been set"),"\n"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-sh"},"git remote -v\n")),"\n",a.createElement(n.h2,null,"Development"),"\n",a.createElement(n.p,null,"We use ",a.createElement(n.a,{href:"https://yarnpkg.com/lang/en/docs/install/"},"yarn")," and yarn workspaces to\ndevelop the Carbon Gatsby theme. This allows us to have a development\nenvironment that’s closely linked to the theme with minimal setup. Run\n",a.createElement(n.code,null,"yarn install")," to install all of the projects dependencies."),"\n",a.createElement(n.p,null,"This project has two packages: the actual theme package (",a.createElement(n.code,null,"gatsby-theme-carbon"),")\nand the ",a.createElement(n.code,null,"example")," package. The example package emulates a project which uses the\ntheme. Its only dependencies are Gatsby, React, and the adjacent theme package.\nThe ",a.createElement(n.code,null,"example")," package also serves as the theme’s documentation and\n",a.createElement(n.a,{href:"https://gatsby-theme-carbon.now.sh"},"website"),"; it’s deployed on every merge to\nmain."),"\n",a.createElement(n.p,null,"New theme development will happen in the theme package while documentation and\ntesting of that change will occur through changes in the example directory."),"\n",a.createElement(n.h3,null,"Development scripts"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.code,null,"yarn dev")," – start the development environment"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"yarn dev:clean")," – clear cache and restart dev"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"yarn format")," – format your code with prettier"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"yarn lint")," - check for errors in your javascript"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"yarn test:prefix")," – build and serve with a path prefix"),"\n"),"\n",a.createElement(n.h2,null,"Work in a branch"),"\n",a.createElement(n.p,null,"You should always start a new project by pulling upstream changes into main and\nthen creating a new branch. This workflow ensures you don’t accidentally commit\nanything to your main branch and get stuck when trying to open a pull request."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-sh"},"git checkout main\ngit pull upstream main\ngit checkout -b my-branch-name\n")),"\n",a.createElement(n.h3,null,"Commit messages"),"\n",a.createElement(n.p,null,"For commit messages we use\n",a.createElement(n.a,{href:"https://gist.github.com/stephenparish/9941e89d80e2bc58a153#allowed-type"},"Angular commit conventions"),"\nto dictate whether a commit is for a feature, fix, docs, etc. You need to prefix\nyour commits with one of the following:"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"feat (feature)"),"\n",a.createElement(n.li,null,"fix (bug fix)"),"\n",a.createElement(n.li,null,"docs (documentation)"),"\n",a.createElement(n.li,null,"style (formatting, missing semi colons, …)"),"\n",a.createElement(n.li,null,"refactor"),"\n",a.createElement(n.li,null,"test (when adding missing tests)"),"\n",a.createElement(n.li,null,"chore (maintain)"),"\n"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-sh"},'git commit -m "chore: this is a test commit message"\n')),"\n",a.createElement(n.h3,null,"Opening a Pull request"),"\n",a.createElement(n.p,null,"When you’re ready to open a pull request, push to your origin remote."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-sh"},"git push origin my-branch-name\n")),"\n",a.createElement(n.p,null,"You’ll get a message in your terminal with a URL to open up a pull request in\nthe upstream repository. Navigate to that URL and be sure to give a detailed\nsummary of your pull request in the title and body section of the form."),"\n",a.createElement(n.h2,null,"Sass and CSS Modules"),"\n",a.createElement(n.p,null,"For internal theme components we use\n",a.createElement(n.a,{href:"https://sass-lang.com/documentation/syntax"},"Sass")," and\n",a.createElement(n.a,{href:"https://github.com/css-modules/css-modules#css-modules"},"CSS Modules"),". This\nallows us to take advantage of the Carbon Design System resources while not\nworrying about className collisions. By default, each ",a.createElement(n.code,null,".scss")," file will be\nsupplied with all of the Carbon Sass\n",a.createElement(n.a,{href:"https://github.com/carbon-design-system/carbon/blob/main/packages/components/src/globals/scss/_vars.scss"},"variables"),":\ncolor, spacing, theme, and motion, as well as type and layout mixins, are\nimported automatically."),"\n",a.createElement(n.p,null,"You should colocate your stylesheet with the component(s) that import it. If the\ncomponent is ",a.createElement(n.code,null,"TreeView")," then the stylesheet should be ",a.createElement(n.code,null,"TreeView.module.scss"),".\nAll contained within the ",a.createElement(n.code,null,"TreeView")," directory."),"\n",a.createElement(n.h3,null,"CSS Modules"),"\n",a.createElement(n.p,null,"You don’t need to prefix your classes as CSS Modules will generate unique class\nnames for you. Import the class from the ",a.createElement(n.code,null,".scss")," file."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-scss",metaData:"path=TreeView.module.scss"},".treeView {\n  color: $text-01;\n}\n")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-jsx",metaData:"path=TreeView.js"},"import { treeView } from './style.css';\n\nconst TreeView = (props) => <div className={treeView} />;\n")),"\n",a.createElement(n.p,null,"For conditionally applying class names, use the ",a.createElement(n.code,null,"classname")," library. Note how\nwe’re using a\n",a.createElement(n.a,{href:"https://tylermcginnis.com/computed-property-names/"},"computed property name")," for\nthe property being based to ",a.createElement(n.code,null,"cx"),". That’s because the className isn’t literally\n",a.createElement(n.code,null,'"long"')," it’s a value generated by CSS Modules and placed in the ",a.createElement(n.code,null,"long"),"\nvariable."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-jsx",metaData:"path=TreeView.js"},"import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = (props) => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = (props) => <div className={className} />;\n};\n")),"\n",a.createElement(n.p,null,"If you need to target a global class not processed by CSS Modules, you can do so\nwith the\n",a.createElement(n.a,{href:"https://github.com/css-modules/css-modules#exceptions"},"global selector"),"."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-scss"},":global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n")),"\n",a.createElement(n.h2,null,"VS Code"),"\n",a.createElement(n.p,null,"To get linting error feedback while writing javascript and SCSS in VS Code,\ninstall the\n",a.createElement(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint"},"stylelint"),"\nand\n",a.createElement(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"},"ESlint"),"\nextensions. We use ESLint’s Prettier rules to format and lint all of our\nJavaScript in one pass. To get your code to format properly on save, add the\nfollowing to a ",a.createElement(n.code,null,".vscode/settings.json")," in the root of your project"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-json",metaData:"path=.vscode/settings.json"},'{\n  "editor.formatOnSave": true,\n  "[javascript]": {\n    "editor.formatOnSave": false\n  },\n  "[javascriptreact]": {\n    "editor.formatOnSave": false\n  },\n  "eslint.autoFixOnSave": true,\n  "prettier.disableLanguages": ["javascript", "javascriptreact"]\n}\n')),"\n",a.createElement(n.p,null,"To lint the entire project and get errors in your ",a.createElement(n.code,null,"Problems")," tray, you can add\nthe following to a ",a.createElement(n.code,null,".vscode/tasks.json")," file in the root of your project. You\ncan run these tasks with ",a.createElement(n.code,null,"cmd+shift+d")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-json",metaData:"path=.vscode/tasks.json"},'{\n  "version": "2.0.0",\n  "tasks": [\n    {\n      "type": "npm",\n      "script": "lint:js",\n      "problemMatcher": "$eslint-stylish"\n    },\n    {\n      "type": "npm",\n      "script": "lint:scss",\n      "problemMatcher": {\n        "owner": "stylelint",\n        "fileLocation": ["relative", "${workspaceFolder}"],\n        "pattern": [\n          {\n            "regexp": "^([^\\\\s].*)$",\n            "file": 1\n          },\n          {\n            "regexp": "^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$",\n            "line": 1,\n            "column": 2,\n            "severity": 3,\n            "message": 4,\n            "code": 5,\n            "loop": true\n          }\n        ]\n      }\n    }\n  ]\n}\n')),"\n",a.createElement(n.h2,null,"Test pages"),"\n",a.createElement(n.p,null,"If you want to add examples of what you are working on or see changes you’ve\nmade, you can add an MDX file to ",a.createElement(n.code,null,"packages/src/pages/test")," that will be visible\nat ",a.createElement(n.code,null,"(your-server-name)/test/(added-file)")," during development. If you do add a\npage to the ",a.createElement(n.code,null,"/test")," directory, update the below list with the file you added and\nits purpose to be included with your pull request."),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"/test/spacing-audit"},a.createElement(n.code,null,"Spacing audit")),": use this page to test spacing around\ncomponents when combined in common patterns."),"\n"),"\n",a.createElement(n.h2,null,"Publishing"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"Pull the latest from the main branch, usually by running\n",a.createElement(n.code,null,"git pull upstream main")," on your local machine."),"\n",a.createElement(n.li,null,"From the root of the package run ",a.createElement(n.code,null,"yarn release"),"."),"\n",a.createElement(n.li,null,"Follow the prompts accordingly."),"\n",a.createElement(n.li,null,"In the project’s\n",a.createElement(n.a,{href:"https://github.com/carbon-design-system/gatsby-theme-carbon/releases"},"release tab"),",\nedit the new release to include a summary of new changes."),"\n"))}function r(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.R)(),e.components);return n?a.createElement(n,e,a.createElement(o,e)):o(e)}}}]);
//# sourceMappingURL=component---src-pages-contributions-mdx-a00a93ae1f8bb5973f98.js.map
{
    "componentChunkName": "component---content-notes-git-branching-md",
    "path": "/git/branching/",
    "result": {"pageContext":{"frontmatter":{"layout":"note","title":"Git Branching","author":"Eric Garcia","last_updated":"2016-07-14T00:00:00.000Z","category":"git"},"relativePagePath":"/home/runner/work/eng618.github.io/eng618.github.io/content/notes/git/branching.md","titleType":"prepend","MdxNode":{"id":"27ce874d-5a73-5911-a360-68f674787adb","children":[],"parent":"07258b6d-f5f2-54c5-8a32-05ba95af00dc","internal":{"content":"---\nlayout: note\ntitle: \"Git Branching\"\nauthor: \"Eric Garcia\"\nlast_updated: 2016-07-14\ncategory: git\n---\n\n> I follow git branching naming convention outline in this [gist](https://gist.github.com/digitaljhelms/4287848)\n\nList all branches including remotes\n\n```bash\ngit branch -a\n```\n\n### Resetting local branch to match remote\n\nSetting your branch to exactly match the remote branch can be done in two steps:\n\n```bash\ngit fetch origin\ngit reset --hard origin/master\n```\n\nIf you want to save your current branch's state before doing this (just in case), you can do:\n\n```bash\ngit commit -a -m \"Saving my work, just in case\"\ngit branch my-saved-work\n```\n\n> Tip: Also see git clean\n\n### Deleting a remote branch\n\n```bash\ngit push origin :<branch-name>\n```\n\n## Local branches\n\n**Sourced From:** [Git housekeeping tutorial](https://railsware.com/blog/2014/08/11/git-housekeeping-tutorial-clean-up-outdated-branches-in-local-and-remote-repositories/)\n\nAt first, list all local branches:\n\n```bash\ngit branch\n```\n\nWe need to know what branches are already merged in “master” and can be easily removed:\n\n```bash\ngit checkout master\ngit branch --merged\n```\n\nNow, remove all outdated branches with:\n\n```bash\ngit branch -d <branch-name-old-merged-feature>\n```\n\nNext, decide what to do with not merged branches:\n\n```bash\ngit branch --no-merged\n```\n\nIf some of them is just abandoned stuff that you don’t need anymore, remove it with “-D” option:\n\n```bash\ngit branch -D old-abandoned-feature\n```\n\n### References to remote branches\n\nAfter each git pull or git fetch command Git creates references to remote branches in local repository, but doesn’t clean up stale references.\n\nList referenced remote branches:\n\n```bash\ngit branch -r\n```\n\nClean-up outdated references:\n\n```bash\ngit remote prune origin\n```\n\n> Tip: Update repository with: `git fetch -p` and Git automatically prunes all stale references.\n\n## Remote branches\n\nUsually, remote repository is a big garbage heap of stale branches, if there is no responsible housekeeping person.\n\nAfter previous `git remote prune origin` we should have synched list of remote branches.\n\nAt first, we can find branches which are already merged in “master”:\n\n```bash\ngit checkout master\n$ git branch -r --merged\n```\n\nBut this command does not provide much information. What if this branch is merged, but still used for feature development. Would be cool to know last commit date and author.\n\nThis magic snippet provides all required information:\n\n```bash\nfor branch in `git branch -r --merged | grep -v HEAD`; do echo -e `git show --format=\"%ci %cr %an\" $branch | head -n 1` \\\\t$branch; done | sort -r\n```\n\nNow, you can delete own remote branches, and ask other authors to clean-up theirs:\n\n```bash\n$ git push origin --delete branch-name\n```\n\nSimilar snippet for not merged branches:\n\n```bash\n$ for branch in `git branch -r --no-merged | grep -v HEAD`; do echo -e `git show --format=\"%ci %cr %an\" $branch | head -n 1` \\\\t$branch; done | sort -r\n```\n\nThis list should be reviewed more thoroughly to avoid losing important commits.\n","type":"Mdx","contentDigest":"099d1af5d3c2468991056224cf8a8f17","owner":"gatsby-plugin-mdx","counter":86},"frontmatter":{"layout":"note","title":"Git Branching","author":"Eric Garcia","last_updated":"2016-07-14T00:00:00.000Z","category":"git"},"exports":{},"rawBody":"---\nlayout: note\ntitle: \"Git Branching\"\nauthor: \"Eric Garcia\"\nlast_updated: 2016-07-14\ncategory: git\n---\n\n> I follow git branching naming convention outline in this [gist](https://gist.github.com/digitaljhelms/4287848)\n\nList all branches including remotes\n\n```bash\ngit branch -a\n```\n\n### Resetting local branch to match remote\n\nSetting your branch to exactly match the remote branch can be done in two steps:\n\n```bash\ngit fetch origin\ngit reset --hard origin/master\n```\n\nIf you want to save your current branch's state before doing this (just in case), you can do:\n\n```bash\ngit commit -a -m \"Saving my work, just in case\"\ngit branch my-saved-work\n```\n\n> Tip: Also see git clean\n\n### Deleting a remote branch\n\n```bash\ngit push origin :<branch-name>\n```\n\n## Local branches\n\n**Sourced From:** [Git housekeeping tutorial](https://railsware.com/blog/2014/08/11/git-housekeeping-tutorial-clean-up-outdated-branches-in-local-and-remote-repositories/)\n\nAt first, list all local branches:\n\n```bash\ngit branch\n```\n\nWe need to know what branches are already merged in “master” and can be easily removed:\n\n```bash\ngit checkout master\ngit branch --merged\n```\n\nNow, remove all outdated branches with:\n\n```bash\ngit branch -d <branch-name-old-merged-feature>\n```\n\nNext, decide what to do with not merged branches:\n\n```bash\ngit branch --no-merged\n```\n\nIf some of them is just abandoned stuff that you don’t need anymore, remove it with “-D” option:\n\n```bash\ngit branch -D old-abandoned-feature\n```\n\n### References to remote branches\n\nAfter each git pull or git fetch command Git creates references to remote branches in local repository, but doesn’t clean up stale references.\n\nList referenced remote branches:\n\n```bash\ngit branch -r\n```\n\nClean-up outdated references:\n\n```bash\ngit remote prune origin\n```\n\n> Tip: Update repository with: `git fetch -p` and Git automatically prunes all stale references.\n\n## Remote branches\n\nUsually, remote repository is a big garbage heap of stale branches, if there is no responsible housekeeping person.\n\nAfter previous `git remote prune origin` we should have synched list of remote branches.\n\nAt first, we can find branches which are already merged in “master”:\n\n```bash\ngit checkout master\n$ git branch -r --merged\n```\n\nBut this command does not provide much information. What if this branch is merged, but still used for feature development. Would be cool to know last commit date and author.\n\nThis magic snippet provides all required information:\n\n```bash\nfor branch in `git branch -r --merged | grep -v HEAD`; do echo -e `git show --format=\"%ci %cr %an\" $branch | head -n 1` \\\\t$branch; done | sort -r\n```\n\nNow, you can delete own remote branches, and ask other authors to clean-up theirs:\n\n```bash\n$ git push origin --delete branch-name\n```\n\nSimilar snippet for not merged branches:\n\n```bash\n$ for branch in `git branch -r --no-merged | grep -v HEAD`; do echo -e `git show --format=\"%ci %cr %an\" $branch | head -n 1` \\\\t$branch; done | sort -r\n```\n\nThis list should be reviewed more thoroughly to avoid losing important commits.\n","fileAbsolutePath":"/home/runner/work/eng618.github.io/eng618.github.io/content/notes/git/branching.md"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}
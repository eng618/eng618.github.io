{"version":3,"file":"component---content-notes-git-git-md-63369538f90a1ad1dc0a.js","mappings":"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","sources":["webpack://engarcia/./content/notes/git/git.md","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/eng618.github.io/eng618.github.io/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><strong parentName=\"p\">{`Jump to`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`TOC\n{:toc}`}</li>\n    </ul>\n    <h1>{`Overview`}</h1>\n    <p>{`This page is designed to unify all the tips and tricks associated with using git. Please feel free to modify and update as needed.`}</p>\n    <h1>{`Amending a Commit Message`}</h1>\n    <p>{`Changing a commit message can cause lots of problems if not handled correctly. Only use the following if `}<strong parentName=\"p\">{`absolutely`}</strong>{` necessary.`}</p>\n    <h2>{`Local commits`}</h2>\n    <p>{`To open your editor, allowing you to change the commit message of the most recent commit:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git commit --amend\n`}</code></pre>\n    <p>{`Additionally, you can set the commit message directly in the command line with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git commit --amend -m \"New commit message\"\n`}</code></pre>\n    <p>{`…however, this can make multi-line commit messages or small corrections more cumbersome to enter.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: Make sure you don’t have any working copy changes before doing this or they can get committed too.`}</p>\n    <h2>{`Remote commits`}</h2>\n    <p>{`Changing the message of a commit that you’ve already pushed to your remote branch`}</p>\n    <p><strong parentName=\"p\">{`Warning:`}</strong>{` be cautious about amending commits that you have already shared with other people. Amending commits essentially rewrites them to have different SHA IDs, which poses a problem if other people have copies of the old commit that you’ve rewritten. Anyone who has a copy of the old commit will need to re-synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.`}</p>\n    <p>{`If you’ve already pushed your commit up to your remote branch, then you’ll need to force push the commit with`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git push <remote> <branch> --force\n`}</code></pre>\n    <p>{`Or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git push <remote> <branch> -f\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Warning:`}</strong>{` force-pushing will overwrite the remote branch with the state of your local one. If there are commits on the remote branch that you don’t have in your local branch, you will lose those commits.`}</p>\n    <h2>{`Past Commits`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/a/1186549/2218959\"\n      }}>{`source`}</a></p>\n    <p>{`You can use rebase to edit a past commit by passing the commit hash, with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git rebase -i '<commit-hash>^'\n`}</code></pre>\n    <p>{`Once your editor is opened with the rebase dialog, put edit as the action word for that commit. Save and close. Open the project and make the changes you wanted to update to that commit. To keep the same commit message you have previously use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git commit --all --amend --no-edit\n`}</code></pre>\n    <p>{`Now you can use `}<inlineCode parentName=\"p\">{`git rebase --continue`}</inlineCode>{` and go a `}<inlineCode parentName=\"p\">{`git push -f`}</inlineCode>{` to force push your changes to the remote repo.`}</p>\n    <h1>{`Git Branching`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`I follow git branching naming convention outline in this `}<a parentName=\"p\" {...{\n          \"href\": \"https://gist.github.com/digitaljhelms/4287848\"\n        }}>{`gist`}</a></p>\n    </blockquote>\n    <p>{`List all branches including remotes`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git branch -a\n`}</code></pre>\n    <h3>{`Resetting local branch to match remote`}</h3>\n    <p>{`Setting your branch to exactly match the remote branch can be done in two steps:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git fetch origin\ngit reset --hard origin/master\n`}</code></pre>\n    <p>{`If you want to save your current branch’s state before doing this (just in case), you can do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git commit -a -m \"Saving my work, just in case\"\ngit branch my-saved-work\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: Also see git clean`}</p>\n    </blockquote>\n    <h3>{`Deleting a remote branch`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git push origin :<branch-name>\n`}</code></pre>\n    <h2>{`Local branches`}</h2>\n    <p><strong parentName=\"p\">{`Sourced From:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"http://railsware.com/blog/2014/08/11/git-housekeeping-tutorial-clean-up-outdated-branches-in-local-and-remote-repositories/\"\n      }}>{`Git housekeeping tutorial`}</a></p>\n    <p>{`At first, list all local branches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git branch\n`}</code></pre>\n    <p>{`We need to know what branches are already merged in “master” and can be easily removed:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git checkout master\ngit branch --merged\n`}</code></pre>\n    <p>{`Now, remove all outdated branches with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git branch -d <branch-name-old-merged-feature>\n`}</code></pre>\n    <p>{`Next, decide what to do with not merged branches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git branch --no-merged\n`}</code></pre>\n    <p>{`If some of them is just abandoned stuff that you don’t need anymore, remove it with “-D” option:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git branch -D old-abandoned-feature\n`}</code></pre>\n    <h3>{`References to remote branches`}</h3>\n    <p>{`After each git pull or git fetch command Git creates references to remote branches in local repository, but doesn’t clean up stale references.`}</p>\n    <p>{`List referenced remote branches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git branch -r\n`}</code></pre>\n    <p>{`Clean-up outdated references:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git remote prune origin\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tip: Update repository with: `}<inlineCode parentName=\"p\">{`git fetch -p`}</inlineCode>{` and Git automatically prunes all stale references.`}</p>\n    </blockquote>\n    <h2>{`Remote branches`}</h2>\n    <p>{`Usually, remote repository is a big garbage heap of stale branches, if there is no responsible housekeeping person.`}</p>\n    <p>{`After previous `}<inlineCode parentName=\"p\">{`git remote prune origin`}</inlineCode>{` we should have synched list of remote branches.`}</p>\n    <p>{`At first, we can find branches which are already merged in “master”:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git checkout master\n$ git branch -r --merged\n`}</code></pre>\n    <p>{`But this command does not provide much information. What if this branch is merged, but still used for feature development. Would be cool to know last commit date and author.`}</p>\n    <p>{`This magic snippet provides all required information:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`for branch in \\`git branch -r --merged | grep -v HEAD\\`; do echo -e \\`git show --format=\"%ci %cr %an\" $branch | head -n 1\\` \\\\\\\\t$branch; done | sort -r\n`}</code></pre>\n    <p>{`Now, you can delete own remote branches, and ask other authors to clean-up theirs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ git push origin --delete branch-name\n`}</code></pre>\n    <p>{`Similar snippet for not merged branches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ for branch in \\`git branch -r --no-merged | grep -v HEAD\\`; do echo -e \\`git show --format=\"%ci %cr %an\" $branch | head -n 1\\` \\\\\\\\t$branch; done | sort -r\n`}</code></pre>\n    <p>{`This list should be reviewed more thoroughly to avoid losing important commits.`}</p>\n    <h1>{`Clean`}</h1>\n    <p>{`Perform a “dry run” of `}<inlineCode parentName=\"p\">{`git clean`}</inlineCode>{`. This will show you which files are going to be removed without actually doing it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clean -n\n`}</code></pre>\n    <p>{`Remove untracked files from the current directory. The `}<inlineCode parentName=\"p\">{`-f`}</inlineCode>{` (force) flag is required unless the clean.requireForce configuration option is set to false (it’s true by default). This will not remove untracked folders or files specified by .gitignore.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clean -f\n`}</code></pre>\n    <p>{`Remove untracked files, but limit the operation to the specified path.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clean -f <path>\n`}</code></pre>\n    <p>{`Remove untracked files and untracked directories from the current directory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clean -df\n`}</code></pre>\n    <p>{`Remove untracked files from the current directory as well as any files that Git usually ignores.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clean -xf\n`}</code></pre>\n    <h2>{`Example`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Edit some existing files`}</li>\n      <li parentName=\"ul\">{`Add some new files`}</li>\n      <li parentName=\"ul\">{`Realize you have no idea what you’re doing`}</li>\n    </ul>\n    <p>{`Undo changes in tracked files`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git reset --hard\n`}</code></pre>\n    <p>{`Remove untracked files`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clean -df\n`}</code></pre>\n    <h1>{`Diff`}</h1>\n    <p>{`Simply use `}<inlineCode parentName=\"p\">{`git diff`}</inlineCode>{` and a file name to check difference between commited and non staged changes`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git diff FILE_NAME\n`}</code></pre>\n    <p>{`If you need to verify the difference of a file that is already staged use the following`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git diff --staged FILE_NAME\n`}</code></pre>\n    <h3>{`Git diff with opendiff`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://thomashunter.name/blog/set-opendiff-filemerge-as-your-git-diff-tool-on-os-x/\"\n      }}>{`Source`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir ~/bin/\ntouch ~/bin/git-diff.sh\n`}</code></pre>\n    <p>{`The contents of the file will look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`#!/bin/sh\n/usr/bin/opendiff \"$2\" \"$5\" -merge \"$1\"\n`}</code></pre>\n    <p>{`Once the script has been made, you’ll want it to be executable`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`chmod u+x ~/bin/git-diff.sh\n`}</code></pre>\n    <p>{`Finally, tell git that you want to set it up as your default merge tool:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git config --global diff.external ~/bin/git-diff.sh\n`}</code></pre>\n    <p>{`If you later decide you hate it, run this command to go back:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git config --global --unset diff.external\n`}</code></pre>\n    <h1>{`Excluding files`}</h1>\n    <h2>{`Ignoring tracked files in your local repo`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git update-index --skip-worktree SOME_FILE\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git update-index --assume-unchanged SOME_FILE\n`}</code></pre>\n    <p>{`To undo assume unchanged`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git update-index --no-assume-unchanged SOME_FILE\n`}</code></pre>\n    <p>{`If using `}<inlineCode parentName=\"p\">{`assume-unchanged`}</inlineCode>{` you can add the following to your `}<strong parentName=\"p\">{`~/.gitconfig`}</strong></p>\n    <p>{`This will allow you to use the alias `}<inlineCode parentName=\"p\">{`git ignored`}</inlineCode>{` to list all excluded files`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`[alias]\n    ignored = !git ls-files -v | grep \"^[[:lower:]]\"\n`}</code></pre>\n    <h2>{`Ignoring un-tracked files in your local repo`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Untested`}</p>\n    </blockquote>\n    <p>{`If you ever want to ignore a file from git, but don’t want to add it to the `}<strong parentName=\"p\">{`.gitignore`}</strong>{` file, you can do it on your local copy by adding it to the file `}<strong parentName=\"p\">{`.git/info/exclude`}</strong></p>\n    <p>{`I’ve setup an alias to do so, just add this to your `}<strong parentName=\"p\">{`.gitconfig`}</strong>{` file under the `}<inlineCode parentName=\"p\">{`[alias]`}</inlineCode>{` section`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`exclude = !sh -c 'echo \"$1\" >> .git/info/exclude' -\n`}</code></pre>\n    <p>{`Then you can execute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git exclude SOME_FILE\n`}</code></pre>\n    <h1>{`Forking`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://stackoverflow.com/questions/9153598/how-do-i-fetch-a-branch-on-someone-elses-fork-on-github\"\n      }}>{`Source`}</a></p>\n    <p>{`When needing to work with a new branch on a forked repo you have to create a new branch in your local fork that references that branch. This can be accomplished by:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git remote add theirUsername git@github.com:theirUsername/repoName.git\ngit fetch theirUsername\ngit checkout -b my_name_for_their_branch theirUsername/theirBranch\n`}</code></pre>\n    <h3>{`Example`}</h3>\n    <p>{`Following directions for `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.ibm.com/MFPSamples/DevCenter/wiki/Keep-fork-in-sync\"\n      }}>{`Keeping your fork in sync`}</a>{` for the DevCetner.`}</p>\n    <p>{`In this example I will be demonstrating creating a `}<inlineCode parentName=\"p\">{`GA`}</inlineCode>{` branch from `}<inlineCode parentName=\"p\">{`upstream`}</inlineCode>{`, in my local environment. I will be prefixing the remote `}<inlineCode parentName=\"p\">{`GA`}</inlineCode>{` branch with my initials to have a differentiation between the `}<inlineCode parentName=\"p\">{`upstream`}</inlineCode>{` branch and my local (forked) copy.`}</p>\n    <p>{`You can set `}<inlineCode parentName=\"p\">{`upstream`}</inlineCode>{` as the repo to follow (`}<strong parentName=\"p\">{`userName`}</strong>{`)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git remote add upstream git@github.ibm.com:MFPSamples/DevCenter\n`}</code></pre>\n    <p>{`Once this is done your are free to `}<inlineCode parentName=\"p\">{`fetch`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`pull`}</inlineCode>{` code from the `}<inlineCode parentName=\"p\">{`upstream`}</inlineCode>{` witch is the source repo for all changes (representing another `}<strong parentName=\"p\">{` userName`}</strong>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git fetch upstream\ngit merge upstream/master\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This is assuming you are trying to merge to you local (forked) `}<inlineCode parentName=\"p\">{`master`}</inlineCode>{` branch`}</p>\n    <p>{`If you need to work off a branch that is in the `}<inlineCode parentName=\"p\">{`upstream`}</inlineCode>{` but not in your local repository (forked) you can create it with a link to upstream as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git checkout -b ENG-GA upstream/GA\n`}</code></pre>\n    <p>{`This line creates a local branch `}<inlineCode parentName=\"p\">{`ENG-GA`}</inlineCode>{` based on `}<inlineCode parentName=\"p\">{`upstream/GA`}</inlineCode>{`. So now you can make updates to your local repo `}<inlineCode parentName=\"p\">{`ENG-GA`}</inlineCode>{` and then push it back to `}<inlineCode parentName=\"p\">{`upstream/GA`}</inlineCode>{` which should help reduce merge conflicts. You still want to be sure to keep your local (forked) branch up to date if your changes will happen over time. Periodically you will need to merge `}<inlineCode parentName=\"p\">{`upstream/GA`}</inlineCode>{` with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git fetch upstream\ngit merge upstream/GA\n`}</code></pre>\n    <p>{`Once you are ready to submit your changes back to upstream you can create a pull request via `}<a parentName=\"p\" {...{\n        \"href\": \"github.ibm.com\"\n      }}><em parentName=\"a\">{`github.com`}</em></a>{`. Ensuring that your base branch is `}<inlineCode parentName=\"p\">{`GA`}</inlineCode>{` and the head branch is `}<inlineCode parentName=\"p\">{`ENG-GA`}</inlineCode>{`. See image for details.`}</p>\n    <img {...{\n      \"src\": \"../forking/git-pull-request.png\",\n      \"alt\": \"Pull Request\"\n    }}></img>\n    <h1>{`.gitignore`}</h1>\n    <h2>{`Untracking a single file`}</h2>\n    <p>{`To untrack a single file that has already been added/initialized to your repository, i.e., stop tracking the file but not delete it from your system use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git rm --cached filename\n`}</code></pre>\n    <h2>{`Untracking all files`}</h2>\n    <p>{`To untrack every file that is now in your `}<strong parentName=\"p\">{`.gitignore`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Commit any outstanding code changes, and then, run this command:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`git commit -m \"Commit message\"\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`This removes any changed files from the index(staging area), then just run:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`git rm -r --cached .\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add all tracked changes`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`git add .\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Commit it:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`git commit -m \".gitignore is now working\"\n`}</code></pre>\n      </li>\n    </ol>\n    <h1>{`Merge conflicts`}</h1>\n    <h2>{`Local changes to same files`}</h2>\n    <p>{`To resolve merge conflicts with error.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`error: Your local changes to the following files would be overwritten by merge:\n`}</code></pre>\n    <p>{`To stash entire working tree`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git stash save --keep-index\n`}</code></pre>\n    <p>{`Now you will be able to merge branch successfully`}</p>\n    <p>{`If you do not need your local changes you can simple drop the stash`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git stash drop\n`}</code></pre>\n    <p>{`or…if you need your changes you can attempt to process them in now using pop`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git stash pop\n`}</code></pre>\n    <p>{`To show what is in your stash use show`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git stash show\n`}</code></pre>\n    <h1>{`Undoing commits`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://stackoverflow.com/questions/927358/how-do-you-undo-the-last-commit\"\n      }}>{`source`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`git commit -m \"Something terribly misguided\"\ngit reset --soft HEAD~\n# << edit files as necessary >>\ngit add ...\ngit commit -m \"New commit message\"\ngit commit -c ORIG_HEAD\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://stackoverflow.com/questions/3197413/how-do-i-delete-unpushed-git-commits\"\n      }}>{`source`}</a></p>\n    <p>{`Delete the most recent commit, keeping the work you’ve done:`}</p>\n    <p><inlineCode parentName=\"p\">{`git reset --soft HEAD~1`}</inlineCode></p>\n    <p>{`Delete the most recent commit, destroying the work you’ve done:`}</p>\n    <p><inlineCode parentName=\"p\">{`git reset --hard HEAD~1`}</inlineCode></p>\n    <h1>{`Other Configurations`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git config --global core.trustctime false\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/a/21891017/2218959\"\n      }}>{`source`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageHeader-module--bx--text-truncate--end--b8JtW\";\nexport var bxTextTruncateFront = \"PageHeader-module--bx--text-truncate--front--WwZFh\";\nexport var pageHeader = \"PageHeader-module--page-header--NqfPe\";\nexport var darkMode = \"PageHeader-module--dark-mode--WCeH8\";\nexport var withTabs = \"PageHeader-module--with-tabs--vbQ-W\";\nexport var text = \"PageHeader-module--text--Er2EO\";","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"EditLink-module--bx--text-truncate--end--uI0cF\";\nexport var bxTextTruncateFront = \"EditLink-module--bx--text-truncate--front--HxjcS\";\nexport var link = \"EditLink-module--link--IDrl1\";\nexport var row = \"EditLink-module--row--BEmSX\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageTabs-module--bx--text-truncate--end--OC59x\";\nexport var bxTextTruncateFront = \"PageTabs-module--bx--text-truncate--front--5I6-L\";\nexport var tabsContainer = \"PageTabs-module--tabs-container--Cdfzw\";\nexport var list = \"PageTabs-module--list--xLqxG\";\nexport var listItem = \"PageTabs-module--list-item--024o6\";\nexport var link = \"PageTabs-module--link--Kz-7R\";\nexport var selectedItem = \"PageTabs-module--selected-item--aBB0K\";","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var text = \"last-modified-date-module--text--ogPQF\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","title","theme","tabs","className","cx","length","id","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","Link","to","React","date","lastModified","Date","toLocaleDateString","day","year","month","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils"],"sourceRoot":""}
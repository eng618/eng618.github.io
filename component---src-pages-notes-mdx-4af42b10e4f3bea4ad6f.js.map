{"version":3,"file":"component---src-pages-notes-mdx-4af42b10e4f3bea4ad6f.js","mappings":"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","sources":["webpack://engarcia/./src/pages/notes.mdx","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://engarcia/./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/eng618.github.io/eng618.github.io/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport { Link, graphql } from 'gatsby';\nexport const pageQuery = graphql`\n  {\n    allMdx {\n      group(field: frontmatter___category) {\n        edges {\n          node {\n            frontmatter {\n              category\n              description\n              title\n            }\n            id\n            slug\n            timeToRead\n            excerpt\n          }\n        }\n      }\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst Title = makeShortcode(\"Title\");\nconst CardGroup = makeShortcode(\"CardGroup\");\nconst MiniCard = makeShortcode(\"MiniCard\");\nconst layoutProps = {\n  pageQuery,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This is my `}<del parentName=\"p\"><strong parentName=\"del\">{`Hidden`}</strong></del>{` notes landing page.`}</p>\n    </PageDescription>\n    <>\n  {props.data.allMdx.group.map(group => <div key={group.edges[0].node.id}>\n      <Title mdxType=\"Title\">{group.edges[0].node.frontmatter.category.toUpperCase()}</Title>\n      <CardGroup mdxType=\"CardGroup\">\n        {group.edges.map(edge => <MiniCard key={edge.node.frontmatter.title} title={edge.node.frontmatter.title} href={edge.node.path} actionIcon=\"arrowRight\" mdxType=\"MiniCard\" />)}\n      </CardGroup>\n    </div>)}\n    </>\n    <h2>{`TODO`}</h2>\n    <p>{`Need to create a query that accepts un-categorized notes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// old query\nexport const pageQuery = graphql\\`\n  query {\n    allFile(filter: { sourceInstanceName: { eq: \"notes\" } }) {\n      edges {\n        node {\n          id\n          childMdx {\n            frontmatter {\n              author\n              category\n              date\n              description\n              keywords\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n\\`;\n`}</code></pre>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageHeader-module--bx--text-truncate--end--b8JtW\";\nexport var bxTextTruncateFront = \"PageHeader-module--bx--text-truncate--front--WwZFh\";\nexport var pageHeader = \"PageHeader-module--page-header--NqfPe\";\nexport var darkMode = \"PageHeader-module--dark-mode--WCeH8\";\nexport var withTabs = \"PageHeader-module--with-tabs--vbQ-W\";\nexport var text = \"PageHeader-module--text--Er2EO\";","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"EditLink-module--bx--text-truncate--end--uI0cF\";\nexport var bxTextTruncateFront = \"EditLink-module--bx--text-truncate--front--HxjcS\";\nexport var link = \"EditLink-module--link--IDrl1\";\nexport var row = \"EditLink-module--row--BEmSX\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageTabs-module--bx--text-truncate--end--OC59x\";\nexport var bxTextTruncateFront = \"PageTabs-module--bx--text-truncate--front--5I6-L\";\nexport var tabsContainer = \"PageTabs-module--tabs-container--Cdfzw\";\nexport var list = \"PageTabs-module--list--xLqxG\";\nexport var listItem = \"PageTabs-module--list-item--024o6\";\nexport var link = \"PageTabs-module--link--Kz-7R\";\nexport var selectedItem = \"PageTabs-module--selected-item--aBB0K\";","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var text = \"last-modified-date-module--text--ogPQF\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","Title","CardGroup","MiniCard","layoutProps","pageQuery","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","data","allMdx","group","map","key","edges","node","id","frontmatter","category","toUpperCase","edge","title","href","path","actionIcon","isMDXComponent","theme","tabs","className","cx","length","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","branch","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","Link","to","React","date","lastModified","Date","toLocaleDateString","day","year","month","pageContext","children","location","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils"],"sourceRoot":""}